// The below copyright notice and the license permission notice
// shall be included in all copies or substantial portions.
// Copyright (C) 2019-2022 Yury Chetyrko <ychetyrko@gmail.com>
// MIT License: https://raw.githubusercontent.com/nezaboodka/reactronic-dom/master/LICENSE
// By contributing, you agree that your contributions will be
// automatically licensed under the license referred above.

import { LoggingOptions, Monitor } from 'reactronic'
import { RxNode, Reaction, Inline, Render, StaticNodeFactory, Priority } from '../core/api'
import { HtmlElementNodeFactory, SvgElementNodeFactory } from './HtmlNodeFactory'

export function RxHtmlBody(name: string, triggers: unknown, render?: Render<HTMLElement>): RxNode<HTMLElement> {
  const factory = new StaticNodeFactory(name, true, global.document.body)
  return Reaction(name, triggers, render, undefined, undefined, undefined, undefined, factory)
}

export function RxA<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLAnchorElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLAnchorElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.a) }
export function RxAbbr<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.abbr) }
export function RxAddress<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.address) }
export function RxArea<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLAreaElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLAreaElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.area) }
export function RxArticle<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.article) }
export function RxAside<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.aside) }
export function RxAudio<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLAudioElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLAudioElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.audio) }
export function RxB<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.b) }
export function RxBase<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLBaseElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLBaseElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.base) }
export function RxBdi<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.bdi) }
export function RxBdo<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.bdo) }
export function RxBig<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.big) }
export function RxBlockQuote<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.blockquote) }
export function RxBody<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLBodyElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLBodyElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.body) }
export function RxBR<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLBRElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLBRElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.br) }
export function RxButton<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLButtonElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLButtonElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.button) }
export function RxCanvas<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLCanvasElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLCanvasElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.canvas) }
export function RxCaption<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableCaptionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableCaptionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.caption) }
export function RxCite<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.cite) }
export function RxCode<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.code) }
export function RxCol<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableColElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableColElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.col) }
export function RxColGroup<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableColElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableColElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.colgroup) }
export function RxData<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLDataElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLDataElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.data) }
export function RxDataList<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLDataListElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLDataListElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.datalist) }
export function RxDD<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.dd) }
export function RxDel<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.del) }
export function RxDetails<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.details) }
export function RxDfn<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.dfn) }
export function RxDiv<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLDivElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLDivElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.div) }
export function RxDL<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLDListElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLDListElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.dl) }
export function RxDT<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.dt) }
export function RxEM<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.em) }
export function RxEmbed<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLEmbedElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLEmbedElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.embed) }
export function RxFieldSet<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLFieldSetElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLFieldSetElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.fieldset) }
export function RxFigCaption<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.figcaption) }
export function RxFigure<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.figure) }
export function RxFooter<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.footer) }
export function RxForm<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLFormElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLFormElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.form) }
export function RxH1<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h1) }
export function RxH2<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h2) }
export function RxH3<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h3) }
export function RxH4<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h4) }
export function RxH5<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h5) }
export function RxH6<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.h6) }
export function RxHead<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHeadElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHeadElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.head) }
export function RxHeader<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.header) }
export function RxHGroup<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.hgroup) }
export function RxHR<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHRElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHRElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.hr) }
export function RxHtml<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLHtmlElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLHtmlElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.html) }
export function RxI<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.i) }
export function RxIFrame<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLIFrameElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLIFrameElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.iframe) }
export function RxImg<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLImageElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLImageElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.img) }
export function RxInput<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLInputElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLInputElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.input) }
export function RxIns<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLModElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLModElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.ins) }
export function RxKbd<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.kbd) }
export function RxKeygen<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.keygen) }
export function RxLabel<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLLabelElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLLabelElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.label) }
export function RxLegend<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLLegendElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLLegendElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.legend) }
export function RxLI<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLLIElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLLIElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.li) }
export function RxLink<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLLinkElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLLinkElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.link) }
export function RxMain<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.main) }
export function RxMap<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLMapElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLMapElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.map) }
export function RxMark<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.mark) }
export function RxMenu<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.menu) }
export function RxMenuItem<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.menuitem) }
export function RxMeta<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLMetaElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLMetaElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.meta) }
export function RxMeter<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.meter) }
export function RxNav<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.nav) }
export function RxNoIndex<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.noindex) }
export function RxNoScript<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.noscript) }
export function RxObj<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLObjectElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLObjectElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.object) }
export function RxOL<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLOListElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLOListElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.ol) }
export function RxOptGroup<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLOptGroupElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLOptGroupElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.optgroup) }
export function RxOption<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLOptionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLOptionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.option) }
export function RxOutput<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.output) }
export function RxP<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLParagraphElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLParagraphElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.p) }
export function RxParam<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLParamElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLParamElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.param) }
export function RxPicture<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.picture) }
export function RxPre<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLPreElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLPreElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.pre) }
export function RxProgress<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLProgressElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLProgressElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.progress) }
export function RxQ<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLQuoteElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLQuoteElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.q) }
export function RxRP<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.rp) }
export function RxRT<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.rt) }
export function RxRuby<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.ruby) }
export function RxS<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.s) }
export function RxSamp<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.samp) }
export function RxScript<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLScriptElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLScriptElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.script) }
export function RxSection<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.section) }
export function RxSelect<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLSelectElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLSelectElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.select) }
export function RxSmall<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.small) }
export function RxSource<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLSourceElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLSourceElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.source) }
export function RxSpan<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLSpanElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLSpanElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.span) }
export function RxStrong<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.strong) }
export function RxStyle<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLStyleElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLStyleElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.style) }
export function RxSub<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.sub) }
export function RxSummary<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.summary) }
export function RxSup<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.sup) }
export function RxTable<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.table) }
export function RxTemplate<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTemplateElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTemplateElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.template) }
export function RxTBody<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableSectionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.tbody) }
export function RxTD<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableCellElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableCellElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.td) }
export function RxTextArea<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTextAreaElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTextAreaElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.textarea) }
export function RxTFoot<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableSectionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.tfoot) }
export function RxTH<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableCellElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableCellElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.th) }
export function RxTHead<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableSectionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.thead) }
export function RxTime<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.time) }
export function RxTitle<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTitleElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTitleElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.title) }
export function RxTR<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTableRowElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTableRowElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.tr) }
export function RxTrack<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLTrackElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLTrackElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.track) }
export function RxU<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.u) }
export function RxUL<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLUListElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLUListElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.ul) }
export function RxVar<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.var) }
export function RxVideo<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLVideoElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLVideoElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.video) }
export function RxWbr<O = void, R = void>(name: string, triggers: unknown, render?: Render<HTMLElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<HTMLElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, HtmlTags.wbr) }

export function A<O = void, R = void>(name: string, render?: Render<HTMLAnchorElement, O, R>, priority?: Priority): RxNode<HTMLAnchorElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.a) }
export function Abbr<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.abbr) }
export function Address<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.address) }
export function Area<O = void, R = void>(name: string, render?: Render<HTMLAreaElement, O, R>, priority?: Priority): RxNode<HTMLAreaElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.area) }
export function Article<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.article) }
export function Aside<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.aside) }
export function Audio<O = void, R = void>(name: string, render?: Render<HTMLAudioElement, O, R>, priority?: Priority): RxNode<HTMLAudioElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.audio) }
export function B<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.b) }
export function Base<O = void, R = void>(name: string, render?: Render<HTMLBaseElement, O, R>, priority?: Priority): RxNode<HTMLBaseElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.base) }
export function Bdi<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.bdi) }
export function Bdo<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.bdo) }
export function Big<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.big) }
export function BlockQuote<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.blockquote) }
export function Body<O = void, R = void>(name: string, render?: Render<HTMLBodyElement, O, R>, priority?: Priority): RxNode<HTMLBodyElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.body) }
export function BR<O = void, R = void>(name: string, render?: Render<HTMLBRElement, O, R>, priority?: Priority): RxNode<HTMLBRElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.br) }
export function Button<O = void, R = void>(name: string, render?: Render<HTMLButtonElement, O, R>, priority?: Priority): RxNode<HTMLButtonElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.button) }
export function Canvas<O = void, R = void>(name: string, render?: Render<HTMLCanvasElement, O, R>, priority?: Priority): RxNode<HTMLCanvasElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.canvas) }
export function Caption<O = void, R = void>(name: string, render?: Render<HTMLTableCaptionElement, O, R>, priority?: Priority): RxNode<HTMLTableCaptionElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.caption) }
export function Cite<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.cite) }
export function Code<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.code) }
export function Col<O = void, R = void>(name: string, render?: Render<HTMLTableColElement, O, R>, priority?: Priority): RxNode<HTMLTableColElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.col) }
export function ColGroup<O = void, R = void>(name: string, render?: Render<HTMLTableColElement, O, R>, priority?: Priority): RxNode<HTMLTableColElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.colgroup) }
export function Data<O = void, R = void>(name: string, render?: Render<HTMLDataElement, O, R>, priority?: Priority): RxNode<HTMLDataElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.data) }
export function DataList<O = void, R = void>(name: string, render?: Render<HTMLDataListElement, O, R>, priority?: Priority): RxNode<HTMLDataListElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.datalist) }
export function DD<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.dd) }
export function Del<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.del) }
export function Details<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.details) }
export function Dfn<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.dfn) }
export function Div<O = void, R = void>(name: string, render?: Render<HTMLDivElement, O, R>, priority?: Priority): RxNode<HTMLDivElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.div) }
export function DL<O = void, R = void>(name: string, render?: Render<HTMLDListElement, O, R>, priority?: Priority): RxNode<HTMLDListElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.dl) }
export function DT<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.dt) }
export function EM<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.em) }
export function Embed<O = void, R = void>(name: string, render?: Render<HTMLEmbedElement, O, R>, priority?: Priority): RxNode<HTMLEmbedElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.embed) }
export function FieldSet<O = void, R = void>(name: string, render?: Render<HTMLFieldSetElement, O, R>, priority?: Priority): RxNode<HTMLFieldSetElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.fieldset) }
export function FigCaption<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.figcaption) }
export function Figure<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.figure) }
export function Footer<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.footer) }
export function Form<O = void, R = void>(name: string, render?: Render<HTMLFormElement, O, R>, priority?: Priority): RxNode<HTMLFormElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.form) }
export function H1<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h1) }
export function H2<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h2) }
export function H3<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h3) }
export function H4<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h4) }
export function H5<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h5) }
export function H6<O = void, R = void>(name: string, render?: Render<HTMLHeadingElement, O, R>, priority?: Priority): RxNode<HTMLHeadingElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.h6) }
export function Head<O = void, R = void>(name: string, render?: Render<HTMLHeadElement, O, R>, priority?: Priority): RxNode<HTMLHeadElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.head) }
export function Header<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.header) }
export function HGroup<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.hgroup) }
export function HR<O = void, R = void>(name: string, render?: Render<HTMLHRElement, O, R>, priority?: Priority): RxNode<HTMLHRElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.hr) }
export function Html<O = void, R = void>(name: string, render?: Render<HTMLHtmlElement, O, R>, priority?: Priority): RxNode<HTMLHtmlElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.html) }
export function I<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.i) }
export function IFrame<O = void, R = void>(name: string, render?: Render<HTMLIFrameElement, O, R>, priority?: Priority): RxNode<HTMLIFrameElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.iframe) }
export function Img<O = void, R = void>(name: string, render?: Render<HTMLImageElement, O, R>, priority?: Priority): RxNode<HTMLImageElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.img) }
export function Input<O = void, R = void>(name: string, render?: Render<HTMLInputElement, O, R>, priority?: Priority): RxNode<HTMLInputElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.input) }
export function Ins<O = void, R = void>(name: string, render?: Render<HTMLModElement, O, R>, priority?: Priority): RxNode<HTMLModElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.ins) }
export function Kbd<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.kbd) }
export function KeyGen<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.keygen) }
export function Label<O = void, R = void>(name: string, render?: Render<HTMLLabelElement, O, R>, priority?: Priority): RxNode<HTMLLabelElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.label) }
export function Legend<O = void, R = void>(name: string, render?: Render<HTMLLegendElement, O, R>, priority?: Priority): RxNode<HTMLLegendElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.legend) }
export function LI<O = void, R = void>(name: string, render?: Render<HTMLLIElement, O, R>, priority?: Priority): RxNode<HTMLLIElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.li) }
export function Link<O = void, R = void>(name: string, render?: Render<HTMLLinkElement, O, R>, priority?: Priority): RxNode<HTMLLinkElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.link) }
export function Main<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.main) }
export function Map<O = void, R = void>(name: string, render?: Render<HTMLMapElement, O, R>, priority?: Priority): RxNode<HTMLMapElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.map) }
export function Mark<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.mark) }
export function Menu<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.menu) }
export function MenuItem<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.menuitem) }
export function Meta<O = void, R = void>(name: string, render?: Render<HTMLMetaElement, O, R>, priority?: Priority): RxNode<HTMLMetaElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.meta) }
export function Meter<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.meter) }
export function Nav<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.nav) }
export function NoIndex<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.noindex) }
export function NoScript<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.noscript) }
export function Obj<O = void, R = void>(name: string, render?: Render<HTMLObjectElement, O, R>, priority?: Priority): RxNode<HTMLObjectElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.object) }
export function OL<O = void, R = void>(name: string, render?: Render<HTMLOListElement, O, R>, priority?: Priority): RxNode<HTMLOListElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.ol) }
export function OptGroup<O = void, R = void>(name: string, render?: Render<HTMLOptGroupElement, O, R>, priority?: Priority): RxNode<HTMLOptGroupElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.optgroup) }
export function Option<O = void, R = void>(name: string, render?: Render<HTMLOptionElement, O, R>, priority?: Priority): RxNode<HTMLOptionElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.option) }
export function Output<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.output) }
export function P<O = void, R = void>(name: string, render?: Render<HTMLParagraphElement, O, R>, priority?: Priority): RxNode<HTMLParagraphElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.p) }
export function Param<O = void, R = void>(name: string, render?: Render<HTMLParamElement, O, R>, priority?: Priority): RxNode<HTMLParamElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.param) }
export function Picture<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.picture) }
export function Pre<O = void, R = void>(name: string, render?: Render<HTMLPreElement, O, R>, priority?: Priority): RxNode<HTMLPreElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.pre) }
export function Progress<O = void, R = void>(name: string, render?: Render<HTMLProgressElement, O, R>, priority?: Priority): RxNode<HTMLProgressElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.progress) }
export function Q<O = void, R = void>(name: string, render?: Render<HTMLQuoteElement, O, R>, priority?: Priority): RxNode<HTMLQuoteElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.q) }
export function RP<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.rp) }
export function RT<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.rt) }
export function Ruby<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.ruby) }
export function S<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.s) }
export function Samp<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.samp) }
export function Script<O = void, R = void>(name: string, render?: Render<HTMLScriptElement, O, R>, priority?: Priority): RxNode<HTMLScriptElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.script) }
export function Section<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.section) }
export function Select<O = void, R = void>(name: string, render?: Render<HTMLSelectElement, O, R>, priority?: Priority): RxNode<HTMLSelectElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.select) }
export function Small<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.small) }
export function Source<O = void, R = void>(name: string, render?: Render<HTMLSourceElement, O, R>, priority?: Priority): RxNode<HTMLSourceElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.source) }
export function Span<O = void, R = void>(name: string, render?: Render<HTMLSpanElement, O, R>, priority?: Priority): RxNode<HTMLSpanElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.span) }
export function Strong<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.strong) }
export function Style<O = void, R = void>(name: string, render?: Render<HTMLStyleElement, O, R>, priority?: Priority): RxNode<HTMLStyleElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.style) }
export function Sub<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.sub) }
export function Summary<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.summary) }
export function Sup<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.sup) }
export function Table<O = void, R = void>(name: string, render?: Render<HTMLTableElement, O, R>, priority?: Priority): RxNode<HTMLTableElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.table) }
export function Template<O = void, R = void>(name: string, render?: Render<HTMLTemplateElement, O, R>, priority?: Priority): RxNode<HTMLTemplateElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.template) }
export function TBody<O = void, R = void>(name: string, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority): RxNode<HTMLTableSectionElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.tbody) }
export function TD<O = void, R = void>(name: string, render?: Render<HTMLTableCellElement, O, R>, priority?: Priority): RxNode<HTMLTableCellElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.td) }
export function TextArea<O = void, R = void>(name: string, render?: Render<HTMLTextAreaElement, O, R>, priority?: Priority): RxNode<HTMLTextAreaElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.textarea) }
export function TFoot<O = void, R = void>(name: string, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority): RxNode<HTMLTableSectionElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.tfoot) }
export function TH<O = void, R = void>(name: string, render?: Render<HTMLTableCellElement, O, R>, priority?: Priority): RxNode<HTMLTableCellElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.th) }
export function THead<O = void, R = void>(name: string, render?: Render<HTMLTableSectionElement, O, R>, priority?: Priority): RxNode<HTMLTableSectionElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.thead) }
export function Time<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.time) }
export function Title<O = void, R = void>(name: string, render?: Render<HTMLTitleElement, O, R>, priority?: Priority): RxNode<HTMLTitleElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.title) }
export function TR<O = void, R = void>(name: string, render?: Render<HTMLTableRowElement, O, R>, priority?: Priority): RxNode<HTMLTableRowElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.tr) }
export function Track<O = void, R = void>(name: string, render?: Render<HTMLTrackElement, O, R>, priority?: Priority): RxNode<HTMLTrackElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.track) }
export function U<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.u) }
export function UL<O = void, R = void>(name: string, render?: Render<HTMLUListElement, O, R>, priority?: Priority): RxNode<HTMLUListElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.ul) }
export function Var<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.var) }
export function Video<O = void, R = void>(name: string, render?: Render<HTMLVideoElement, O, R>, priority?: Priority): RxNode<HTMLVideoElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.video) }
export function Wbr<O = void, R = void>(name: string, render?: Render<HTMLElement, O, R>, priority?: Priority): RxNode<HTMLElement, O, unknown, R> { return Inline(name, render, priority, HtmlTags.wbr) }

export function RxSvg<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGSVGElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGSVGElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.svg) }
export function RxSvgA<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGAElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGAElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.a) }
export function RxAnimate<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGAnimateElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGAnimateElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.animate) }
export function RxAnimateMotion<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGAnimateMotionElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGAnimateMotionElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.animateMotion) }
export function RxAnimateTransform<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGAnimateTransformElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGAnimateTransformElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.animateTransform) }
export function RxCircle<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGCircleElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGCircleElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.circle) }
export function RxClipPath<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGClipPathElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGClipPathElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.clipPath) }
export function RxDefs<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGDefsElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGDefsElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.defs) }
export function RxDesc<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGDescElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGDescElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.desc) }
export function RxEllipse<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGEllipseElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGEllipseElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.ellipse) }
export function RxFeBlend<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEBlendElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEBlendElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feBlend) }
export function RxFeColorMatrix<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEColorMatrixElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEColorMatrixElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feColorMatrix) }
export function RxFeComponentTransfer<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEComponentTransferElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEComponentTransferElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feComponentTransfer) }
export function RxFeComposite<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFECompositeElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFECompositeElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feComposite) }
export function RxFeConvolveMatrix<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEConvolveMatrixElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEConvolveMatrixElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feConvolveMatrix) }
export function RxFeDiffuseLighting<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEDiffuseLightingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEDiffuseLightingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feDiffuseLighting) }
export function RxFeDisplacementMap<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEDisplacementMapElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEDisplacementMapElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feDisplacementMap) }
export function RxFeDistantLight<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEDistantLightElement, O, R>,priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEDistantLightElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feDistantLight) }
export function RxFeDropShadow<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEDropShadowElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEDropShadowElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feDropShadow) }
export function RxFeFlood<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEFloodElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEFloodElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feFlood) }
export function RxFeFuncA<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEFuncAElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEFuncAElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feFuncA) }
export function RxFeFuncB<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEFuncBElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEFuncBElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feFuncB) }
export function RxFeFuncG<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEFuncGElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEFuncGElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feFuncG) }
export function RxFeFuncR<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEFuncRElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEFuncRElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feFuncR) }
export function RxFeGaussianBlur<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEGaussianBlurElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEGaussianBlurElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feGaussianBlur) }
export function RxFeImage<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEImageElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEImageElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feImage) }
export function RxFeMerge<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEMergeElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEMergeElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feMerge) }
export function RxFeMergeNode<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEMergeNodeElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEMergeNodeElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feMergeNode) }
export function RxFeMorphology<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEMorphologyElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEMorphologyElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feMorphology) }
export function RxFeOffset<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEOffsetElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEOffsetElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feOffset) }
export function RxFePointLight<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFEPointLightElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFEPointLightElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.fePointLight) }
export function RxFeSpecularLighting<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFESpecularLightingElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFESpecularLightingElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feSpecularLighting) }
export function RxFeSpotLight<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFESpotLightElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFESpotLightElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feSpotLight) }
export function RxFeTile<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFETileElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFETileElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feTile) }
export function RxFeTurbulence<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFETurbulenceElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFETurbulenceElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.feTurbulence) }
export function RxFilter<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGFilterElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGFilterElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.filter) }
export function RxForeignObject<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGForeignObjectElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGForeignObjectElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.foreignObject) }
export function RxG<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGGElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGGElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.g) }
export function RxSvgImage<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGImageElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGImageElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.image) }
export function RxLine<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGLineElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGLineElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.line) }
export function RxLinearGradient<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGLinearGradientElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGLinearGradientElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.linearGradient) }
export function RxMarker<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGMarkerElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGMarkerElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.marker) }
export function RxMask<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGMaskElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGMaskElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.mask) }
export function RxMetadata<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGMetadataElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGMetadataElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.metadata) }
export function RxMPath<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.mpath) }
export function RxPath<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGPathElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGPathElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.path) }
export function RxPattern<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGPatternElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGPatternElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.pattern) }
export function RxPolygon<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGPolygonElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGPolygonElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.polygon) }
export function RxPolyline<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGPolylineElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGPolylineElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.polyline) }
export function RxRadialGradient<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGRadialGradientElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGRadialGradientElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.radialGradient) }
export function RxRect<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGRectElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGRectElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.rect) }
export function RxStop<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGStopElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGStopElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.stop) }
export function RxSvgSwitch<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGSwitchElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGSwitchElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.switch) }
export function RxSymbol<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGSymbolElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGSymbolElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.symbol) }
export function RxText<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGTextElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGTextElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.text) }
export function RxTextPath<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGTextPathElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGTextPathElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.textPath) }
export function RxTSpan<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGTSpanElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGTSpanElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.tspan) }
export function RxUse<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGUseElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGUseElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.use) }
export function RxView<O = void, R = void>(name: string, triggers: unknown, render?: Render<SVGViewElement, O, R>, priority?: Priority, monitor?: Monitor, throttling?: number, logging?: Partial<LoggingOptions>): RxNode<SVGViewElement, O, unknown, R> { return Reaction(name, triggers, render, priority, monitor, throttling, logging, SvgTags.view) }

export function Svg<O = void, R = void>(name: string, render?: Render<SVGSVGElement, O, R>, priority?: Priority): RxNode<SVGSVGElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.svg) }
export function SvgA<O = void, R = void>(name: string, render?: Render<SVGAElement, O, R>, priority?: Priority): RxNode<SVGAElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.a) }
export function Animate<O = void, R = void>(name: string, render?: Render<SVGAnimateElement, O, R>, priority?: Priority): RxNode<SVGAnimateElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.animate) }
export function AnimateMotion<O = void, R = void>(name: string, render?: Render<SVGAnimateMotionElement, O, R>, priority?: Priority): RxNode<SVGAnimateMotionElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.animateMotion) }
export function AnimateTransform<O = void, R = void>(name: string, render?: Render<SVGAnimateTransformElement, O, R>, priority?: Priority): RxNode<SVGAnimateTransformElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.animateTransform) }
export function Circle<O = void, R = void>(name: string, render?: Render<SVGCircleElement, O, R>, priority?: Priority): RxNode<SVGCircleElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.circle) }
export function ClipPath<O = void, R = void>(name: string, render?: Render<SVGClipPathElement, O, R>, priority?: Priority): RxNode<SVGClipPathElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.clipPath) }
export function Defs<O = void, R = void>(name: string, render?: Render<SVGDefsElement, O, R>, priority?: Priority): RxNode<SVGDefsElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.defs) }
export function Desc<O = void, R = void>(name: string, render?: Render<SVGDescElement, O, R>, priority?: Priority): RxNode<SVGDescElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.desc) }
export function Ellipse<O = void, R = void>(name: string, render?: Render<SVGEllipseElement, O, R>, priority?: Priority): RxNode<SVGEllipseElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.ellipse) }
export function FeBlend<O = void, R = void>(name: string, render?: Render<SVGFEBlendElement, O, R>, priority?: Priority): RxNode<SVGFEBlendElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feBlend) }
export function FeColorMatrix<O = void, R = void>(name: string, render?: Render<SVGFEColorMatrixElement, O, R>, priority?: Priority): RxNode<SVGFEColorMatrixElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feColorMatrix) }
export function FeComponentTransfer<O = void, R = void>(name: string, render?: Render<SVGFEComponentTransferElement, O, R>, priority?: Priority): RxNode<SVGFEComponentTransferElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feComponentTransfer) }
export function FeComposite<O = void, R = void>(name: string, render?: Render<SVGFECompositeElement, O, R>, priority?: Priority): RxNode<SVGFECompositeElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feComposite) }
export function FeConvolveMatrix<O = void, R = void>(name: string, render?: Render<SVGFEConvolveMatrixElement, O, R>, priority?: Priority): RxNode<SVGFEConvolveMatrixElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feConvolveMatrix) }
export function FeDiffuseLighting<O = void, R = void>(name: string, render?: Render<SVGFEDiffuseLightingElement, O, R>, priority?: Priority): RxNode<SVGFEDiffuseLightingElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feDiffuseLighting) }
export function FeDisplacementMap<O = void, R = void>(name: string, render?: Render<SVGFEDisplacementMapElement, O, R>, priority?: Priority): RxNode<SVGFEDisplacementMapElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feDisplacementMap) }
export function FeDistantLight<O = void, R = void>(name: string, render?: Render<SVGFEDistantLightElement, O, R>, priority?: Priority): RxNode<SVGFEDistantLightElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feDistantLight) }
export function FeDropShadow<O = void, R = void>(name: string, render?: Render<SVGFEDropShadowElement, O, R>, priority?: Priority): RxNode<SVGFEDropShadowElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feDropShadow) }
export function FeFlood<O = void, R = void>(name: string, render?: Render<SVGFEFloodElement, O, R>, priority?: Priority): RxNode<SVGFEFloodElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feFlood) }
export function FeFuncA<O = void, R = void>(name: string, render?: Render<SVGFEFuncAElement, O, R>, priority?: Priority): RxNode<SVGFEFuncAElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feFuncA) }
export function FeFuncB<O = void, R = void>(name: string, render?: Render<SVGFEFuncBElement, O, R>, priority?: Priority): RxNode<SVGFEFuncBElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feFuncB) }
export function FeFuncG<O = void, R = void>(name: string, render?: Render<SVGFEFuncGElement, O, R>, priority?: Priority): RxNode<SVGFEFuncGElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feFuncG) }
export function FeFuncR<O = void, R = void>(name: string, render?: Render<SVGFEFuncRElement, O, R>, priority?: Priority): RxNode<SVGFEFuncRElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feFuncR) }
export function FeGaussianBlur<O = void, R = void>(name: string, render?: Render<SVGFEGaussianBlurElement, O, R>, priority?: Priority): RxNode<SVGFEGaussianBlurElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feGaussianBlur) }
export function FeImage<O = void, R = void>(name: string, render?: Render<SVGFEImageElement, O, R>, priority?: Priority): RxNode<SVGFEImageElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feImage) }
export function FeMerge<O = void, R = void>(name: string, render?: Render<SVGFEMergeElement, O, R>, priority?: Priority): RxNode<SVGFEMergeElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feMerge) }
export function FeMergeNode<O = void, R = void>(name: string, render?: Render<SVGFEMergeNodeElement, O, R>, priority?: Priority): RxNode<SVGFEMergeNodeElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feMergeNode) }
export function FeMorphology<O = void, R = void>(name: string, render?: Render<SVGFEMorphologyElement, O, R>, priority?: Priority): RxNode<SVGFEMorphologyElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feMorphology) }
export function FeOffset<O = void, R = void>(name: string, render?: Render<SVGFEOffsetElement, O, R>, priority?: Priority): RxNode<SVGFEOffsetElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feOffset) }
export function FePointLight<O = void, R = void>(name: string, render?: Render<SVGFEPointLightElement, O, R>, priority?: Priority): RxNode<SVGFEPointLightElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.fePointLight) }
export function FeSpecularLighting<O = void, R = void>(name: string, render?: Render<SVGFESpecularLightingElement, O, R>, priority?: Priority): RxNode<SVGFESpecularLightingElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feSpecularLighting) }
export function FeSpotLight<O = void, R = void>(name: string, render?: Render<SVGFESpotLightElement, O, R>, priority?: Priority): RxNode<SVGFESpotLightElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feSpotLight) }
export function FeTile<O = void, R = void>(name: string, render?: Render<SVGFETileElement, O, R>, priority?: Priority): RxNode<SVGFETileElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feTile) }
export function FeTurbulence<O = void, R = void>(name: string, render?: Render<SVGFETurbulenceElement, O, R>, priority?: Priority): RxNode<SVGFETurbulenceElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.feTurbulence) }
export function Filter<O = void, R = void>(name: string, render?: Render<SVGFilterElement, O, R>, priority?: Priority): RxNode<SVGFilterElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.filter) }
export function ForeignObject<O = void, R = void>(name: string, render?: Render<SVGForeignObjectElement, O, R>, priority?: Priority): RxNode<SVGForeignObjectElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.foreignObject) }
export function G<O = void, R = void>(name: string, render?: Render<SVGGElement, O, R>, priority?: Priority): RxNode<SVGGElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.g) }
export function SvgImage<O = void, R = void>(name: string, render?: Render<SVGImageElement, O, R>, priority?: Priority): RxNode<SVGImageElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.image) }
export function Line<O = void, R = void>(name: string, render?: Render<SVGLineElement, O, R>, priority?: Priority): RxNode<SVGLineElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.line) }
export function LinearGradient<O = void, R = void>(name: string, render?: Render<SVGLinearGradientElement, O, R>, priority?: Priority): RxNode<SVGLinearGradientElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.linearGradient) }
export function Marker<O = void, R = void>(name: string, render?: Render<SVGMarkerElement, O, R>, priority?: Priority): RxNode<SVGMarkerElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.marker) }
export function Mask<O = void, R = void>(name: string, render?: Render<SVGMaskElement, O, R>, priority?: Priority): RxNode<SVGMaskElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.mask) }
export function MetaData<O = void, R = void>(name: string, render?: Render<SVGMetadataElement, O, R>, priority?: Priority): RxNode<SVGMetadataElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.metadata) }
export function MPath<O = void, R = void>(name: string, render?: Render<SVGElement, O, R>, priority?: Priority): RxNode<SVGElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.mpath) }
export function Path<O = void, R = void>(name: string, render?: Render<SVGPathElement, O, R>, priority?: Priority): RxNode<SVGPathElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.path) }
export function Pattern<O = void, R = void>(name: string, render?: Render<SVGPatternElement, O, R>, priority?: Priority): RxNode<SVGPatternElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.pattern) }
export function Polygon<O = void, R = void>(name: string, render?: Render<SVGPolygonElement, O, R>, priority?: Priority): RxNode<SVGPolygonElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.polygon) }
export function PolyLine<O = void, R = void>(name: string, render?: Render<SVGPolylineElement, O, R>, priority?: Priority): RxNode<SVGPolylineElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.polyline) }
export function RadialGradient<O = void, R = void>(name: string, render?: Render<SVGRadialGradientElement, O, R>, priority?: Priority): RxNode<SVGRadialGradientElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.radialGradient) }
export function Rect<O = void, R = void>(name: string, render?: Render<SVGRectElement, O, R>, priority?: Priority): RxNode<SVGRectElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.rect) }
export function Stop<O = void, R = void>(name: string, render?: Render<SVGStopElement, O, R>, priority?: Priority): RxNode<SVGStopElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.stop) }
export function SvgSwitch<O = void, R = void>(name: string, render?: Render<SVGSwitchElement, O, R>, priority?: Priority): RxNode<SVGSwitchElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.switch) }
export function Symbol<O = void, R = void>(name: string, render?: Render<SVGSymbolElement, O, R>, priority?: Priority): RxNode<SVGSymbolElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.symbol) }
export function Text<O = void, R = void>(name: string, render?: Render<SVGTextElement, O, R>, priority?: Priority): RxNode<SVGTextElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.text) }
export function TextPath<O = void, R = void>(name: string, render?: Render<SVGTextPathElement, O, R>, priority?: Priority): RxNode<SVGTextPathElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.textPath) }
export function TSpan<O = void, R = void>(name: string, render?: Render<SVGTSpanElement, O, R>, priority?: Priority): RxNode<SVGTSpanElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.tspan) }
export function Use<O = void, R = void>(name: string, render?: Render<SVGUseElement, O, R>, priority?: Priority): RxNode<SVGUseElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.use) }
export function View<O = void, R = void>(name: string, render?: Render<SVGViewElement, O, R>, priority?: Priority): RxNode<SVGViewElement, O, unknown, R> { return Inline(name, render, priority, SvgTags.view) }

const HtmlTags = {
  a: new HtmlElementNodeFactory<HTMLAnchorElement>('a', true),
  abbr: new HtmlElementNodeFactory<HTMLElement>('abbr', true),
  address: new HtmlElementNodeFactory<HTMLElement>('address', true),
  area: new HtmlElementNodeFactory<HTMLAreaElement>('area', true),
  article: new HtmlElementNodeFactory<HTMLElement>('article', true),
  aside: new HtmlElementNodeFactory<HTMLElement>('aside', true),
  audio: new HtmlElementNodeFactory<HTMLAudioElement>('audio', true),
  b: new HtmlElementNodeFactory<HTMLElement>('b', true),
  base: new HtmlElementNodeFactory<HTMLBaseElement>('base', true),
  bdi: new HtmlElementNodeFactory<HTMLElement>('bdi', true),
  bdo: new HtmlElementNodeFactory<HTMLElement>('bdo', true),
  big: new HtmlElementNodeFactory<HTMLElement>('big', true),
  blockquote: new HtmlElementNodeFactory<HTMLElement>('blockquote', true),
  body: new HtmlElementNodeFactory<HTMLBodyElement>('body', true),
  br: new HtmlElementNodeFactory<HTMLBRElement>('br', true),
  button: new HtmlElementNodeFactory<HTMLButtonElement>('button', true),
  canvas: new HtmlElementNodeFactory<HTMLCanvasElement>('canvas', true),
  caption: new HtmlElementNodeFactory<HTMLTableCaptionElement>('caption', true),
  cite: new HtmlElementNodeFactory<HTMLElement>('cite', true),
  code: new HtmlElementNodeFactory<HTMLElement>('code', true),
  col: new HtmlElementNodeFactory<HTMLTableColElement>('col', true),
  colgroup: new HtmlElementNodeFactory<HTMLTableColElement>('colgroup', true),
  data: new HtmlElementNodeFactory<HTMLDataElement>('data', true),
  datalist: new HtmlElementNodeFactory<HTMLDataListElement>('datalist', true),
  dd: new HtmlElementNodeFactory<HTMLElement>('dd', true),
  del: new HtmlElementNodeFactory<HTMLElement>('del', true),
  details: new HtmlElementNodeFactory<HTMLElement>('details', true),
  dfn: new HtmlElementNodeFactory<HTMLElement>('dfn', true),
  div: new HtmlElementNodeFactory<HTMLDivElement>('div', true),
  dl: new HtmlElementNodeFactory<HTMLDListElement>('dl', true),
  dt: new HtmlElementNodeFactory<HTMLElement>('dt', true),
  em: new HtmlElementNodeFactory<HTMLElement>('em', true),
  embed: new HtmlElementNodeFactory<HTMLEmbedElement>('embed', true),
  fieldset: new HtmlElementNodeFactory<HTMLFieldSetElement>('fieldset', true),
  figcaption: new HtmlElementNodeFactory<HTMLElement>('figcaption', true),
  figure: new HtmlElementNodeFactory<HTMLElement>('figure', true),
  footer: new HtmlElementNodeFactory<HTMLElement>('footer', true),
  form: new HtmlElementNodeFactory<HTMLFormElement>('form', true),
  h1: new HtmlElementNodeFactory<HTMLHeadingElement>('h1', true),
  h2: new HtmlElementNodeFactory<HTMLHeadingElement>('h2', true),
  h3: new HtmlElementNodeFactory<HTMLHeadingElement>('h3', true),
  h4: new HtmlElementNodeFactory<HTMLHeadingElement>('h4', true),
  h5: new HtmlElementNodeFactory<HTMLHeadingElement>('h5', true),
  h6: new HtmlElementNodeFactory<HTMLHeadingElement>('h6', true),
  head: new HtmlElementNodeFactory<HTMLHeadElement>('head', true),
  header: new HtmlElementNodeFactory<HTMLElement>('header', true),
  hgroup: new HtmlElementNodeFactory<HTMLElement>('hgroup', true),
  hr: new HtmlElementNodeFactory<HTMLHRElement>('hr', true),
  html: new HtmlElementNodeFactory<HTMLHtmlElement>('html', true),
  i: new HtmlElementNodeFactory<HTMLElement>('i', true),
  iframe: new HtmlElementNodeFactory<HTMLIFrameElement>('iframe', true),
  img: new HtmlElementNodeFactory<HTMLImageElement>('img', true),
  input: new HtmlElementNodeFactory<HTMLInputElement>('input', true),
  ins: new HtmlElementNodeFactory<HTMLModElement>('ins', true),
  kbd: new HtmlElementNodeFactory<HTMLElement>('kbd', true),
  keygen: new HtmlElementNodeFactory<HTMLElement>('keygen', true),
  label: new HtmlElementNodeFactory<HTMLLabelElement>('label', true),
  legend: new HtmlElementNodeFactory<HTMLLegendElement>('legend', true),
  li: new HtmlElementNodeFactory<HTMLLIElement>('li', true),
  link: new HtmlElementNodeFactory<HTMLLinkElement>('link', true),
  main: new HtmlElementNodeFactory<HTMLElement>('main', true),
  map: new HtmlElementNodeFactory<HTMLMapElement>('map', true),
  mark: new HtmlElementNodeFactory<HTMLElement>('mark', true),
  menu: new HtmlElementNodeFactory<HTMLElement>('menu', true),
  menuitem: new HtmlElementNodeFactory<HTMLElement>('menuitem', true),
  meta: new HtmlElementNodeFactory<HTMLMetaElement>('meta', true),
  meter: new HtmlElementNodeFactory<HTMLElement>('meter', true),
  nav: new HtmlElementNodeFactory<HTMLElement>('nav', true),
  noindex: new HtmlElementNodeFactory<HTMLElement>('noindex', true),
  noscript: new HtmlElementNodeFactory<HTMLElement>('noscript', true),
  object: new HtmlElementNodeFactory<HTMLObjectElement>('object', true),
  ol: new HtmlElementNodeFactory<HTMLOListElement>('ol', true),
  optgroup: new HtmlElementNodeFactory<HTMLOptGroupElement>('optgroup', true),
  option: new HtmlElementNodeFactory<HTMLOptionElement>('option', true),
  output: new HtmlElementNodeFactory<HTMLElement>('output', true),
  p: new HtmlElementNodeFactory<HTMLParagraphElement>('p', true),
  param: new HtmlElementNodeFactory<HTMLParamElement>('param', true),
  picture: new HtmlElementNodeFactory<HTMLElement>('picture', true),
  pre: new HtmlElementNodeFactory<HTMLPreElement>('pre', true),
  progress: new HtmlElementNodeFactory<HTMLProgressElement>('progress', true),
  q: new HtmlElementNodeFactory<HTMLQuoteElement>('q', true),
  rp: new HtmlElementNodeFactory<HTMLElement>('rp', true),
  rt: new HtmlElementNodeFactory<HTMLElement>('rt', true),
  ruby: new HtmlElementNodeFactory<HTMLElement>('ruby', true),
  s: new HtmlElementNodeFactory<HTMLElement>('s', true),
  samp: new HtmlElementNodeFactory<HTMLElement>('samp', true),
  script: new HtmlElementNodeFactory<HTMLScriptElement>('script', true),
  section: new HtmlElementNodeFactory<HTMLElement>('section', true),
  select: new HtmlElementNodeFactory<HTMLSelectElement>('select', true),
  small: new HtmlElementNodeFactory<HTMLElement>('small', true),
  source: new HtmlElementNodeFactory<HTMLSourceElement>('source', true),
  span: new HtmlElementNodeFactory<HTMLSpanElement>('span', true),
  strong: new HtmlElementNodeFactory<HTMLElement>('strong', true),
  style: new HtmlElementNodeFactory<HTMLStyleElement>('style', true),
  sub: new HtmlElementNodeFactory<HTMLElement>('sub', true),
  summary: new HtmlElementNodeFactory<HTMLElement>('summary', true),
  sup: new HtmlElementNodeFactory<HTMLElement>('sup', true),
  table: new HtmlElementNodeFactory<HTMLTableElement>('table', true),
  template: new HtmlElementNodeFactory<HTMLTemplateElement>('template', true),
  tbody: new HtmlElementNodeFactory<HTMLTableSectionElement>('tbody', true),
  td: new HtmlElementNodeFactory<HTMLTableCellElement>('td', true),
  textarea: new HtmlElementNodeFactory<HTMLTextAreaElement>('textarea', true),
  tfoot: new HtmlElementNodeFactory<HTMLTableSectionElement>('tfoot', true),
  th: new HtmlElementNodeFactory<HTMLTableCellElement>('th', true),
  thead: new HtmlElementNodeFactory<HTMLTableSectionElement>('thead', true),
  time: new HtmlElementNodeFactory<HTMLElement>('time', true),
  title: new HtmlElementNodeFactory<HTMLTitleElement>('title', true),
  tr: new HtmlElementNodeFactory<HTMLTableRowElement>('tr', true),
  track: new HtmlElementNodeFactory<HTMLTrackElement>('track', true),
  u: new HtmlElementNodeFactory<HTMLElement>('u', true),
  ul: new HtmlElementNodeFactory<HTMLUListElement>('ul', true),
  var: new HtmlElementNodeFactory<HTMLElement>('var', true),
  video: new HtmlElementNodeFactory<HTMLVideoElement>('video', true),
  wbr: new HtmlElementNodeFactory<HTMLElement>('wbr', true),
  // webview: new HtmlNodeFactory<HTMLWebViewElement>('webview', true),
}

const SvgTags = {
  svg: new SvgElementNodeFactory<SVGSVGElement>('svg', true),
  a: new SvgElementNodeFactory<SVGAElement>('a', true),
  animate: new SvgElementNodeFactory<SVGAnimateElement>('animate', true),
  animateMotion: new SvgElementNodeFactory<SVGAnimateMotionElement>('animateMotion', true),
  animateTransform: new SvgElementNodeFactory<SVGAnimateTransformElement>('animateTransform', true),
  circle: new SvgElementNodeFactory<SVGCircleElement>('circle', true),
  clipPath: new SvgElementNodeFactory<SVGClipPathElement>('clipPath', true),
  defs: new SvgElementNodeFactory<SVGDefsElement>('defs', true),
  desc: new SvgElementNodeFactory<SVGDescElement>('desc', true),
  ellipse: new SvgElementNodeFactory<SVGEllipseElement>('ellipse', true),
  feBlend: new SvgElementNodeFactory<SVGFEBlendElement>('feBlend', true),
  feColorMatrix: new SvgElementNodeFactory<SVGFEColorMatrixElement>('feColorMatrix', true),
  feComponentTransfer: new SvgElementNodeFactory<SVGFEComponentTransferElement>('feComponentTransfer', true),
  feComposite: new SvgElementNodeFactory<SVGFECompositeElement>('feComposite', true),
  feConvolveMatrix: new SvgElementNodeFactory<SVGFEConvolveMatrixElement>('feConvolveMatrix', true),
  feDiffuseLighting: new SvgElementNodeFactory<SVGFEDiffuseLightingElement>('feDiffuseLighting', true),
  feDisplacementMap: new SvgElementNodeFactory<SVGFEDisplacementMapElement>('feDisplacementMap', true),
  feDistantLight: new SvgElementNodeFactory<SVGFEDistantLightElement>('feDistantLight', true),
  feDropShadow: new SvgElementNodeFactory<SVGFEDropShadowElement>('feDropShadow', true),
  feFlood: new SvgElementNodeFactory<SVGFEFloodElement>('feFlood', true),
  feFuncA: new SvgElementNodeFactory<SVGFEFuncAElement>('feFuncA', true),
  feFuncB: new SvgElementNodeFactory<SVGFEFuncBElement>('feFuncB', true),
  feFuncG: new SvgElementNodeFactory<SVGFEFuncGElement>('feFuncG', true),
  feFuncR: new SvgElementNodeFactory<SVGFEFuncRElement>('feFuncR', true),
  feGaussianBlur: new SvgElementNodeFactory<SVGFEGaussianBlurElement>('feGaussianBlur', true),
  feImage: new SvgElementNodeFactory<SVGFEImageElement>('feImage', true),
  feMerge: new SvgElementNodeFactory<SVGFEMergeElement>('feMerge', true),
  feMergeNode: new SvgElementNodeFactory<SVGFEMergeNodeElement>('feMergeNode', true),
  feMorphology: new SvgElementNodeFactory<SVGFEMorphologyElement>('feMorphology', true),
  feOffset: new SvgElementNodeFactory<SVGFEOffsetElement>('feOffset', true),
  fePointLight: new SvgElementNodeFactory<SVGFEPointLightElement>('fePointLight', true),
  feSpecularLighting: new SvgElementNodeFactory<SVGFESpecularLightingElement>('feSpecularLighting', true),
  feSpotLight: new SvgElementNodeFactory<SVGFESpotLightElement>('feSpotLight', true),
  feTile: new SvgElementNodeFactory<SVGFETileElement>('feTile', true),
  feTurbulence: new SvgElementNodeFactory<SVGFETurbulenceElement>('feTurbulence', true),
  filter: new SvgElementNodeFactory<SVGFilterElement>('filter', true),
  foreignObject: new SvgElementNodeFactory<SVGForeignObjectElement>('foreignObject', true),
  g: new SvgElementNodeFactory<SVGGElement>('g', true),
  image: new SvgElementNodeFactory<SVGImageElement>('image', true),
  line: new SvgElementNodeFactory<SVGLineElement>('line', true),
  linearGradient: new SvgElementNodeFactory<SVGLinearGradientElement>('linearGradient', true),
  marker: new SvgElementNodeFactory<SVGMarkerElement>('marker', true),
  mask: new SvgElementNodeFactory<SVGMaskElement>('mask', true),
  metadata: new SvgElementNodeFactory<SVGMetadataElement>('metadata', true),
  mpath: new SvgElementNodeFactory<SVGElement>('mpath', true),
  path: new SvgElementNodeFactory<SVGPathElement>('path', true),
  pattern: new SvgElementNodeFactory<SVGPatternElement>('pattern', true),
  polygon: new SvgElementNodeFactory<SVGPolygonElement>('polygon', true),
  polyline: new SvgElementNodeFactory<SVGPolylineElement>('polyline', true),
  radialGradient: new SvgElementNodeFactory<SVGRadialGradientElement>('radialGradient', true),
  rect: new SvgElementNodeFactory<SVGRectElement>('rect', true),
  stop: new SvgElementNodeFactory<SVGStopElement>('stop', true),
  switch: new SvgElementNodeFactory<SVGSwitchElement>('switch', true),
  symbol: new SvgElementNodeFactory<SVGSymbolElement>('symbol', true),
  text: new SvgElementNodeFactory<SVGTextElement>('text', true),
  textPath: new SvgElementNodeFactory<SVGTextPathElement>('textPath', true),
  tspan: new SvgElementNodeFactory<SVGTSpanElement>('tspan', true),
  use: new SvgElementNodeFactory<SVGUseElement>('use', true),
  view: new SvgElementNodeFactory<SVGViewElement>('view', true),
}
